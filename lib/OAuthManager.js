/**
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

'use strict';

const _servers = require('./Servers');
const _apiHelper = require('./APIHelper');
const _configuration = require('./configuration');

class OAuthManager {

    /*
     * Function to build the Authorization URL
     *
     * @param   scope  {array}  An array of all scopes needed (optional)
     * @param   state  {string} The state string (optional)
     *
     * @return   {string}  The authorization URL
     */
    static buildAuthorizationUrl(scope, state) {
        // prepare query string for API call
        const _baseUri = _configuration.getBaseUri(_servers.AUTH_SERVER);

        let _queryBuilder = `${_baseUri}${'/authorize'}`;

        const scopeString = this.convertScopeArrayToList(scope);

        const queryParams = {
            response_type: 'token',
            client_id: _configuration.oAuthClientId,
            redirect_uri: _configuration.oAuthRedirectUri,
        };

        if (scope) queryParams.scope = scopeString;
        if (state) queryParams.state = state;

        // process query parameters
        _queryBuilder = _apiHelper.appendUrlWithQueryParameters(_queryBuilder, queryParams);

        // validate url
        const _queryUrl = _apiHelper.cleanUrl(_queryBuilder);

        return _queryUrl;
    }

    /*
     * Helper function to convert array of scopes into a space-delimited string
     *
     * @param   scope  {array}  An array of all scopes needed (optional)
     *
     * @return    {string}  Space delimited string/list of scopes
     *                      Returns the scope as is if a string is passed in
     */
    static convertScopeArrayToList(scope) {
        if (typeof (scope) === 'string') {
            return scope;
        }
        let scopeList = '';
        if (scope) {
            if (scope.length > 1) {
                scopeList = scope.join(' ');
            } else {
                scopeList = scope[0];
            }
        }
        return scopeList;
    }

}

module.exports = OAuthManager;
